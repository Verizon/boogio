#!/usr/bin/env python

# ----------------------------------------------------------------------------
# Copyright (C) 2017 Verizon.  All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ----------------------------------------------------------------------------

'''Manage trusted advisor check auditing.'''

import argparse
import json
import logging
import os
import sys

# Set default logging handler to avoid "No handler found" warnings.
try:  # Python 2.7+
    from logging import NullHandler
except ImportError:
    class NullHandler(logging.Handler):
        '''Placeholder handler.'''
        def emit(self, record):
            '''Pylint compliant docstring.'''
            pass

from boogio import trusted_advisor


logging.getLogger(__name__).addHandler(NullHandler())


FILENAME = os.path.split(__file__)[-1]
BASE_FILENAME = FILENAME[:-3] if FILENAME[-3:] == '.py' else FILENAME

DEFAULT_PROFILE_NAME = 'default'

# LOG_HANDLE = '%s_logger' % FILENAME
DEFAULT_LOG_FILE_NAME = '.'.join([BASE_FILENAME, 'log'])
DEFAULT_LOG_PATH = os.path.join(os.getcwd(), DEFAULT_LOG_FILE_NAME)
DEFAULT_OUTPUT_DIR = '/tmp'

DEFAULT_REPORT_CATEGORIES = ['security', 'fault_tolerance']
DEFAULT_REPORT_FORMAT = 'text'
REPORT_FORMATS = ['text', 'json']


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
def argument_parser():
    '''Define command line arguments.'''

    parser = argparse.ArgumentParser(
        description='''
            Fetch Trusted Advisor check information and create reports.
        '''
        )

    parser.add_argument(
        '--argus',
        default=False,
        action='store_true',
        help='''write output in Argus bundle format. '''
        )

    parser.add_argument(
        '-c', '--categories',
        nargs='*',
        default=DEFAULT_REPORT_CATEGORIES,
        help='''
            trusted advisor categories to report (DEFAULT: %s).
            ''' % DEFAULT_REPORT_CATEGORIES
        )

    parser.add_argument(
        '-d', '--dump',
        default=False,
        action='store_true',
        help='''output to stdout. '''
        )

    parser.add_argument(
        '-f', '--format',
        default=DEFAULT_REPORT_FORMAT,
        choices=REPORT_FORMATS,
        help='''
            summary report summary (DEFAULT: %s).
            ''' % DEFAULT_REPORT_FORMAT
        )

    parser.add_argument(
        '-l', '--log-path',
        default=DEFAULT_LOG_PATH,
        help='''
            path to desired log file (DEFAULT: %s).
            ''' % DEFAULT_LOG_FILE_NAME
        )

    parser.add_argument(
        '--no-log',
        default=False,
        action='store_true',
        help='''don't write a log file. '''
        )

    parser.add_argument(
        '-o', '--output-dir',
        default=DEFAULT_OUTPUT_DIR,
        help='''
            path to desired output directory (DEFAULT: %s).
            ''' % DEFAULT_OUTPUT_DIR
        )

    parser.add_argument(
        '-p', '--profile-name',
        default=DEFAULT_PROFILE_NAME,
        help='''
            AWS config profile to use (DEFAULT: %s).
            ''' % DEFAULT_PROFILE_NAME
        )

    parser.add_argument(
        '--refresh',
        default=False,
        action='store_true',
        help='''refresh Trusted Advisor checks. '''
        )

    parser.add_argument(
        '-v', '--verbose',
        dest='verbose',
        default=0,
        action='count',
        help='''show more output. '''
        )

    parser.add_argument(
        '-x', '--exclude-checks',
        nargs='*',
        help='''names of trusted advisor checks to exclude from reports. '''
        )

    return parser


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
def initialize_logging(args):
    '''Initialize loggers, handlers and formatters.

    A stream handler and file handler are added to the root logger.
    '''

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    # Logging handler for log file
    if not args.no_log:
        fhandler = logging.FileHandler(args.log_path)
        fhandler.setLevel(logging.INFO)
        fformatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
        fhandler.setFormatter(fformatter)
        logger.addHandler(fhandler)

    # Logging handler for stdout messages.
    shandler = logging.StreamHandler()

    sh_loglevel = [logging.WARNING, logging.INFO, logging.DEBUG]
    shandler.setLevel(sh_loglevel[min(args.verbose, 2)])

    if shandler.level < logging.INFO:
        sformatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
        shandler.setFormatter(sformatter)
    logger.addHandler(shandler)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
def log_startup_configuration(args):
    '''Log execution start and configuration information.'''

    logger = logging.getLogger(__name__)

    logger.info('#%s', ' -' * 32)
    logger.info('#%sStarting %s', ' ' * 24, FILENAME)
    logger.info('#%s', ' -' * 32)
    logger.debug('Process PID: %s', os.getpid())
    if args.no_log:
        logger.info('logging is disabled')
    else:
        logger.info('log file is %s', args.log_path)

    logger.info('Command line parameters:')
    for attr in [attr for attr in dir(args) if attr[0] != '_']:
        attr_log_entry = '    {:<16}\t{}'.format(attr, getattr(args, attr))
        logger.info(attr_log_entry)


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
def main():
    '''Main program entry point.'''

    parser = argument_parser()
    args = parser.parse_args()

    initialize_logging(args)
    log_startup_configuration(args)
    logger = logging.getLogger(__name__)

    logger.info(
        'creating TrustedAdvisorCheckManager using profile: %s',
        args.profile_name
        )
    tacm = trusted_advisor.TrustedAdvisorCheckManager(
        profile_name=args.profile_name
        )

    # First check if we're doing a refresh.
    if args.refresh:
        tacm.refresh(*args.categories)
        exit(0)

    # E.g. 'security': 'trusted_advisor_security'
    category_filenames = dict([
        (c, 'trusted_advisor_' + c)
        for c in tacm.categories if c in args.categories
        ])

    for category, filename in category_filenames.items():

        if args.argus:
            output_path = os.path.join(args.output_dir, filename + '.json')
            logger.info('writing %s bundle to %s', category, output_path)

            if args.dump:
                sys.stdout.write(
                    json.dumps(
                        tacm.argus_report(
                            [category],
                            exclude_checks=args.exclude_checks,
                            format='raw'
                            )
                        )
                    )
                sys.stdout.write('\n')

            else:
                with open(
                        os.path.join(args.output_dir, output_path), 'w'
                        ) as fptr:  # pylint: disable=bad-continuation
                    json.dump(
                        tacm.argus_report(
                            [category],
                            exclude_checks=args.exclude_checks,
                            format='raw'
                            ), fptr
                        )

        else:
            output_path = os.path.join(
                args.output_dir, '.'.join([filename, args.format]))
            logger.info('writing %s report to %s', category, output_path)

            if args.dump:
                sys.stdout.write(
                    tacm.summary_report(
                        [category],
                        exclude_checks=args.exclude_checks,
                        format=args.format
                        )
                    )
                sys.stdout.write('\n')

            else:
                with open(
                        os.path.join(args.output_dir, output_path), 'w'
                        ) as fptr:  # pylint: disable=bad-continuation
                    fptr.write(
                        tacm.summary_report(
                            [category],
                            exclude_checks=args.exclude_checks,
                            format=args.format
                            )
                        )


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if __name__ == '__main__':
    main()
